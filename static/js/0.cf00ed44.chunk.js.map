{"version":3,"sources":["hooks/useIsOnScreen.tsx","styled/animations.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/player/FullscreenProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx","components/widgets/ScrollToTopButton.tsx","components/layout/LayoutOutOfItems.tsx"],"names":["handlers","observer","IntersectionObserver","entries","forEach","entry","handler","find","h","element","target","update","isIntersecting","threshold","useIsOnScreen","isOnScreen","setOnScreen","React","useState","onIsOnScreenChange","useCallback","value","useEffect","push","observe","filter","unobserve","fadeOut","keyframes","_templateObject","_taggedTemplateLiteral","Slider","styled","input","_ref3","$controls","$accent","theme","css","_templateObject4","_ref2","_templateObject3","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","_ref","commonStyle","_templateObject2","thumbStyle","MorphSvg","svg","ToggleButton","InvisButton","dropShadow","dimensions","bigSpacing","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","event","stopPropagation","goBack","scrollToPost","onFullscreenEnter","setFullscreenPost","RouteName","STORIES","location","pathname","_jsx","onClick","title","children","CloseIcon","color","ExpandIcon","Wrapper","div","flexRowWithGap","LinkButton","a","timings","transitionTime","DownloadButton","LinkList","fullSrc","handleDownload","download","_jsxs","href","rel","ExternalLinkIcon","DownloadIcon","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","handleClick","addEventListener","removeEventListener","handle","step","current","currentTime","toString","chromePercentage","duration","style","backgroundImage","concat","requestAnimationFrame","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","onBack","isActive","keybinds","ArrowRight","ArrowLeft","pressed","key","preventDefault","document","mouseState","setMouseState","setPost","newIndex","useSelector","selectAutoscrollDelay","listener","then","Date","getTime","renderFrame","now","_templateObject5","PlayButton","name","viewBox","xmlns","x","y","width","height","_templateObject6","LengthDisplay","span","_templateObject7","spacing","ForwardArea","_templateObject8","BackwardArea","_templateObject9","ImageOverlay","isFullscreen","_Fragment","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","handleSkipBackward","onDoubleClick","BackwardIcon","tabIndex","ForwardIcon","formatDuration","getOverlayContent","_objectSpread","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useIsScrolling","isScrolling","setIsScrolling","undefined","clearTimeout","setTimeout","passive","length","useAutoplay","shouldPlay","setShouldPlay","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","playState","setPlayState","gifRef","setGifRef","prefAutoplay","selectAutoPlay","autoPlay","preload","selectPreloadGifs","usedSource","play","async","pause","togglePlay","Image","Video","setVideoRef","selectPreloadVideos","paused","err","message","includes","console","warn","error","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","preview","loadOriginals","selectOriginals","useMemo","useSources","ScrollToTopButton","useLocation","NavigateBackButton","ScrollUpButton","scrollUp","window","scrollTo","BlockButton","ArrowUp","Link","to","SEARCH","Div","StyledSurface","Surface","bodyWidth","StyledImage","LayoutOutOfItems","virtualRef","role","OutOfItems","aliases","selectAliasesAsList","aliasesForRendering","reduce","result","alias","types","toggleTag","useToggleTag","outOfResultsPicture","HorizontalLine","SmallTitle","TagList","tags","onTagClick","onTagMenu","detailed"],"mappings":"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","file":"static/js/0.cf00ed44.chunk.js","sourcesContent":["import React from 'react'\n\n// List of handlers paired with the target element for identification\nlet handlers: Array<{ element: Element; update: (isOnScreen: boolean) => void }> = []\n\n// global handler that can handle multiple entires at the same time\nconst handleOnScreenChange = (entries: IntersectionObserverEntry[]) => {\n  entries.forEach((entry) => {\n    const handler = handlers.find((h) => h.element === entry.target)\n\n    if (handler) {\n      handler.update(entry.isIntersecting)\n    }\n  })\n}\n\n// single observer\nconst observer = new IntersectionObserver(handleOnScreenChange, { threshold: 1 })\n\n/**\n * Provides a boolean value indicating whether the {@link target} is fully visible on screen\n */\nexport default function useIsOnScreen(target: Element | null) {\n  const [isOnScreen, setOnScreen] = React.useState(false)\n\n  const onIsOnScreenChange = React.useCallback((value: boolean) => {\n    setOnScreen(value)\n  }, [])\n\n  React.useEffect(() => {\n    if (target) {\n      const handler = { element: target, update: onIsOnScreenChange }\n      handlers.push(handler)\n      observer.observe(target)\n\n      return () => {\n        handlers.filter((h) => h !== handler)\n        observer.unobserve(target)\n      }\n    }\n  }, [onIsOnScreenChange, target])\n\n  return [isOnScreen]\n}\n","import { keyframes } from 'styled-components'\n\nexport const fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`\n","import styled, { DefaultTheme, css } from 'styled-components'\n\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\n  const commonStyle = css`\n    height: 16px;\n    width: 16px;\n    border-radius: 100px;\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\n    cursor: pointer;\n  `\n\n  return css`\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      ${commonStyle}\n    }\n\n    &::-moz-range-thumb {\n      ${commonStyle}\n    }\n\n    &::-ms-thumb {\n      ${commonStyle}\n    }\n  `\n}\n\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\n  return css`\n    -webkit-appearance: none;\n    flex-grow: 1;\n    background: ${(props) => props.theme.colors.layerBg};\n    border-radius: 100px;\n    height: 6px;\n\n    &::-moz-range-progress {\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\n    }\n\n    &::-ms-fill-lower {\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\n    }\n  `\n}\n\nexport const Slider = styled.input(\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\n    ${trackStyle({ $accent, theme })}\n    ${thumbStyle({ $controls, theme })}\n  `\n)\n","import React, { MouseEventHandler } from 'react'\nimport styled from 'styled-components'\n\ninterface PlayPauseIconProps {\n  className?: string\n  isPaused: boolean\n  onClick: MouseEventHandler<SVGElement>\n}\n\nconst MorphSvg = styled.svg`\n  > rect {\n    transition: all 0.2s ease-in;\n  }\n\n  &.play {\n    .left {\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\n    }\n\n    .right {\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\n    }\n  }\n\n  &.pause {\n    .left {\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\n    }\n\n    .right {\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\n    }\n  }\n`\n\n/**\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\n * Use onClick to update isPaused.\n * Additionally, this component takes a classname\n */\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\n  const { onClick, className = '', isPaused } = props\n\n  return (\n    <MorphSvg\n      name='Play/Pause'\n      viewBox='0 0 24 24'\n      xmlns='http://www.w3.org/2000/svg'\n      onClick={onClick}\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\n    >\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\n    </MorphSvg>\n  )\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport styled, { css } from 'styled-components'\nimport { RouteName } from '../../data/types'\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\nimport { scrollToPost, setFullscreenPost } from '../../redux/actions'\nimport { dropShadow } from '../../styled/mixins/shadow'\nimport { InvisButton } from '../designsystem/Buttons'\n\nconst ToggleButton = styled(InvisButton)(\n  ({ theme }) => css`\n    grid-area: 1/1/2/2;\n    place-self: start start;\n    ${dropShadow}\n    padding: ${theme.dimensions.bigSpacing};\n    cursor: pointer;\n  `\n)\n\ninterface ToggleFullscreenButtonProps {\n  index: number\n}\n\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\n  const { index } = props\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      history.goBack()\n      dispatch(scrollToPost(index))\n    },\n    [dispatch, history, index]\n  )\n\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      dispatch(setFullscreenPost(index))\n      history.push(RouteName.STORIES)\n    },\n    [dispatch, history, index]\n  )\n\n  return history.location.pathname === RouteName.STORIES ? (\n    <ToggleButton onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen'>\n      <CloseIcon color='white' />\n    </ToggleButton>\n  ) : (\n    <ToggleButton onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen'>\n      <ExpandIcon color='white' />\n    </ToggleButton>\n  )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { download } from '../../data/utils'\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\nimport { flexRowWithGap } from '../../styled/mixins/layout'\nimport { dropShadow } from '../../styled/mixins/shadow'\nimport { InvisButton } from '../designsystem/Buttons'\n\nconst Wrapper = styled.div`\n  grid-area: 3/1/4/2;\n  ${flexRowWithGap}\n  place-self: end start;\n  place-items: start center;\n`\n\nconst LinkButton = styled.a(\n  ({ theme }) => css`\n    padding: ${theme.dimensions.bigSpacing};\n    cursor: pointer;\n    ${dropShadow({ theme })}\n\n    svg {\n      transition: all ${theme.timings.transitionTime} ease-out;\n    }\n  `\n)\n\nconst DownloadButton = styled(InvisButton)`\n  cursor: pointer;\n`\n\ninterface LinkListProps {\n  fullSrc: string\n}\n\nexport default function LinkList(props: LinkListProps) {\n  const { fullSrc } = props\n\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      download(fullSrc)\n    },\n    [fullSrc]\n  )\n\n  return (\n    <Wrapper>\n      <LinkButton href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\n      </LinkButton>\n\n      <DownloadButton aria-label='Download Image' onClick={handleDownload} title={fullSrc}>\n        <DownloadIcon color='white' />\n      </DownloadButton>\n    </Wrapper>\n  )\n}\n","import styled, { css } from 'styled-components'\nimport { fadeOut } from '../../styled/animations'\nimport { formatDuration } from '../../misc/formatting'\nimport { ProgressBar } from './ProgressBar'\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\nimport LinkList from './LinkList'\nimport React, { useCallback } from 'react'\nimport FullscreenProgressBar from './FullscreenProgressBar'\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\nimport { dropShadow } from '../../styled/mixins/shadow'\n\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\n  return isVisible\n    ? css``\n    : css`\n        opacity: 0;\n        animation: ${fadeOut} 0.4s ease-in;\n      `\n}\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto 1fr auto auto;\n\n  ${overlayVisibility};\n`\n\nconst VideoProgressBar = styled(ProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.bigSpacing};\n  `\n)\n\nconst AutoProgressBar = styled(FullscreenProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.bigSpacing};\n  `\n)\n\nconst PlayButton = styled(PlayPauseIcon)`\n  height: 50px;\n  width: 50px;\n  grid-area: 2/2/3/3;\n  place-self: center center;\n  cursor: pointer;\n  fill: white;\n  ${dropShadow}\n`\n\nconst LengthDisplay = styled.span(\n  (props) => css`\n    grid-area: 3/3/4/4;\n    place-self: end end;\n    background: #00000080;\n    color: white;\n    border-radius: 4px;\n    padding: ${props.theme.dimensions.spacing};\n    margin: ${props.theme.dimensions.bigSpacing};\n  `\n)\n\nconst ForwardArea = styled.div`\n  display: grid;\n  grid-area: 2/3/3/4;\n  place-items: center;\n  opacity: 0;\n`\n\nconst BackwardArea = styled.div`\n  display: grid;\n  grid-area: 2/1/3/2;\n  place-items: center;\n  opacity: 0;\n`\n\ntype ImageOverlayProps = {\n  type: 'image'\n  index: number\n  fullSrc: string\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\ntype GifOverlayProps = {\n  type: 'gif'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  onTogglePaused: React.MouseEventHandler\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\ntype VideoOverlayProps = {\n  type: 'video'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  duration: number\n  onTogglePaused: React.MouseEventHandler\n  onSeek: (value: number) => void\n  videoRef: HTMLVideoElement | null\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\n  isVisible: boolean\n  setVisible: (value: boolean) => void\n}\n\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\n  const { index, fullSrc, isFullscreen, isActive, onFinished, onBack } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} onBack={onBack} isActive={isActive} />}\n    </>\n  )\n}\n\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished, onBack } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\n      {isFullscreen && (\n        <AutoProgressBar index={index} isPaused={isPaused} onBack={onBack} onFinished={onFinished} isActive={isActive} />\n      )}\n      <LengthDisplay>GIF</LengthDisplay>\n    </>\n  )\n}\n\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\n\n  const handleSkipForward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime + 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  const handleSkipBackward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime - 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <BackwardArea onDoubleClick={handleSkipBackward}>\n        <BackwardIcon tabIndex={0} />\n      </BackwardArea>\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\n      <ForwardArea onDoubleClick={handleSkipForward}>\n        <ForwardIcon tabIndex={0} />\n      </ForwardArea>\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\n    </>\n  )\n}\n\nfunction getOverlayContent(props: OverlayProps) {\n  switch (props.type) {\n    case 'image':\n      return <ImageOverlay {...props} />\n    case 'gif':\n      return <GifOverlay {...props} />\n    case 'video':\n      return <VideoOverlay {...props} />\n  }\n}\n\nexport function Overlay(props: OverlayProps) {\n  const { isVisible, setVisible } = props\n\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\n\n  return (\n    <Wrapper\n      isVisible={isVisible}\n      onClick={toggleVisible}\n      data-testid='overlay-wrapper'\n      data-name='overlay'\n      className='overlay'\n    >\n      {getOverlayContent(props)}\n    </Wrapper>\n  )\n}\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\nimport { useTheme } from 'styled-components'\nimport { Slider } from '../designsystem/Slider'\n\ninterface ProgressBarProps {\n  isPaused: boolean\n  videoRef: HTMLVideoElement | null\n  onChange: (newValue: number) => void\n  className?: string\n  onEnded?: () => void\n}\n\nexport const ProgressBar = (props: ProgressBarProps) => {\n  const { isPaused, videoRef, className, onChange, onEnded } = props\n\n  const sliderRef = React.useRef<HTMLInputElement>(null)\n\n  const theme = useTheme()\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n    (event) => {\n      const newValue = Number(event.target.value)\n      onChange(newValue)\n    },\n    [onChange]\n  )\n\n  const handleClick: MouseEventHandler = useCallback((event) => {\n    event.stopPropagation()\n  }, [])\n\n  React.useEffect(() => {\n    if (onEnded && videoRef) {\n      videoRef.addEventListener('ended', onEnded)\n\n      return () => videoRef.removeEventListener('ended', onEnded)\n    }\n  })\n\n  React.useEffect(() => {\n    if (!isPaused) {\n      let handle: number\n\n      const step = () => {\n        if (sliderRef?.current && videoRef) {\n          sliderRef.current.value = videoRef.currentTime.toString()\n          const chromePercentage = (videoRef.currentTime / videoRef.duration) * 100\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\n        }\n\n        handle = requestAnimationFrame(step)\n      }\n\n      handle = requestAnimationFrame(step)\n\n      return () => {\n        cancelAnimationFrame(handle)\n      }\n    }\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\n\n  return (\n    <Slider\n      ref={sliderRef}\n      type='range'\n      step={1}\n      min={0}\n      max={videoRef?.duration || 0}\n      onChange={handleChange}\n      className={className}\n      onClick={handleClick}\n      $controls\n      $accent\n    />\n  )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { NO_OP } from '../../data/types'\nimport { setFullscreenPost } from '../../redux/actions'\nimport { selectAutoscrollDelay } from '../../redux/selectors'\nimport { Slider } from '../designsystem/Slider'\n\ninterface FullscreenProgressBarProps {\n  className?: string\n  index: number\n  isPaused?: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\n  const { onFinished = NO_OP, onBack = NO_OP, isActive } = props\n\n  const keybinds: Record<string, () => void> = {\n    'ArrowRight' : () => onFinished(),\n    'ArrowLeft' : () => onBack()\n  }\n\n  React.useEffect(() => {\n    const handler = (event: KeyboardEvent) => {\n      const pressed = `${event.key}`;\n      if (pressed in keybinds) {\n        event.preventDefault()\n        event.stopPropagation()\n        keybinds[pressed]()\n      }\n    }\n    document.addEventListener('keydown', handler)\n    return () => document.removeEventListener('keydown', handler)\n  })\n\n  const dispatch = useDispatch()\n  const [mouseState, setMouseState] = React.useState(false)\n  const setPost = React.useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\n  const duration = 1000 * useSelector(selectAutoscrollDelay)\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  React.useEffect(() => {\n    const listener = () => setMouseState(true)\n    document.addEventListener('mousedown', listener)\n    document.addEventListener('touchstart', listener)\n\n    return () => {\n      document.removeEventListener('mousedown', listener)\n      document.removeEventListener('touchstart', listener)\n    }\n  })\n\n  React.useEffect(() => {\n    const listener = () => setMouseState(false)\n    document.addEventListener('mouseup', listener)\n    document.addEventListener('touchend', listener)\n\n    return () => {\n      document.removeEventListener('mouseup', listener)\n      document.removeEventListener('touchend', listener)\n    }\n  })\n\n  React.useEffect(() => {\n    if (!mouseState && isActive) {\n      let handle: number\n      let then = new Date().getTime()\n\n      const renderFrame = () => {\n        if (ref.current) {\n          const now = new Date().getTime()\n          const newValue = Number(ref.current.value) + (now - then)\n          then = now\n\n          ref.current.value = newValue.toString()\n          const chromePercentage = (newValue / duration) * 100\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\n\n          if (newValue >= Number(ref.current.max)) {\n            onFinished()\n            if (ref.current) {\n              ref.current.value = '0'\n            }\n          } else {\n            handle = requestAnimationFrame(renderFrame)\n          }\n        }\n      }\n\n      handle = requestAnimationFrame(renderFrame)\n\n      return () => {\n        cancelAnimationFrame(handle)\n      }\n    }\n  }, [duration, isActive, mouseState, onFinished, props.index, setPost])\n\n  return (\n    <Slider\n      ref={ref}\n      type='range'\n      step={1}\n      min={0}\n      max={duration}\n      onChange={NO_OP}\n      onClick={NO_OP}\n      $controls={false}\n      $accent={false}\n      className={props.className}\n    />\n  )\n}\n","import styled from 'styled-components'\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins/media'\n\nconst FlexVideo = styled.video`\n  ${flexMedia}\n  ${preserveAspectRatio}\n  grid-area: 1/1/2/2;\n`\n\nexport default FlexVideo\n","import styled from 'styled-components'\nimport { mediaStyle } from '../../../styled/mixins/media'\nimport FlexImage from '../../designsystem/FlexImage'\nimport FlexVideo from '../../designsystem/FlexVideo'\n\nexport const PostVideo = styled(FlexVideo)`\n  ${mediaStyle}\n`\n\nexport const PostImage = styled(FlexImage)`\n  ${mediaStyle}\n`\n","import React from 'react'\nimport { NO_OP } from '../../../data/types'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\n\ninterface PictureProps {\n  viewSrc: string\n  fullSrc: string\n  onLoad?: () => void\n  width: number\n  height: number\n  index: number\n  isFullscreen: boolean\n  onFinished?: () => void\n  onBack?: () => void\n  isActive: boolean\n}\n\nexport default function Picture(props: PictureProps) {\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished, onBack } = props\n\n  return (\n    <>\n      <PostImage\n        data-testid='image'\n        src={viewSrc}\n        alt={viewSrc}\n        onLoad={onLoad}\n        loading='lazy'\n        width={width}\n        height={height}\n      />\n      <Overlay\n        type='image'\n        fullSrc={fullSrc}\n        index={index}\n        isVisible={true}\n        setVisible={NO_OP}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        onBack={onBack}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React from 'react'\n\nlet isScrollingGlobal = false\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\nlet listener: ((e: any) => void) | undefined\nlet timeoutId: NodeJS.Timeout | undefined\n\nexport const useIsScrolling = () => {\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\n\n  if (listener === undefined) {\n    listener = (e) => {\n      isScrollingGlobal = true\n      observers.forEach((update) => update(isScrollingGlobal))\n\n      if (timeoutId) clearTimeout(timeoutId)\n\n      timeoutId = setTimeout(() => {\n        isScrollingGlobal = false\n        observers.forEach((update) => update(isScrollingGlobal))\n      }, 500)\n    }\n    document.addEventListener('scroll', listener, { passive: true })\n  }\n\n  React.useEffect(() => {\n    observers.push(setIsScrolling)\n    setIsScrolling(isScrollingGlobal)\n    return () => {\n      observers = observers.filter((update) => update !== setIsScrolling)\n\n      if (observers.length === 0 && listener) {\n        document.removeEventListener('scroll', listener)\n        listener = undefined\n      }\n    }\n  }, [])\n\n  // return global isOnline state and setter function\n  return isScrolling\n}\n","import React from 'react'\nimport useIsOnScreen from './useIsOnScreen'\nimport { useIsScrolling } from './useIsScrolling'\n\nexport function useAutoplay(ref: Element | null) {\n  const [shouldPlay, setShouldPlay] = React.useState(false)\n\n  const [isOnScreen] = useIsOnScreen(ref)\n  const isScrolling = useIsScrolling()\n\n  React.useEffect(() => {\n    if (isOnScreen && !isScrolling) {\n      setShouldPlay(true)\n    }\n  }, [isOnScreen, isScrolling])\n\n  React.useEffect(() => {\n    if (!isOnScreen) {\n      setShouldPlay(false)\n    }\n  }, [isOnScreen])\n\n  return shouldPlay\n}\n","import React, { useEffect, useState } from 'react'\nimport { NO_OP } from '../../../data/types'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\nimport { useSelector } from 'react-redux'\nimport { selectAutoPlay, selectPreloadGifs } from '../../../redux/selectors'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Gif(props: MediaProps) {\n  const {\n    viewSrc,\n    thumbnailSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    onFinished,\n    isActive,\n  } = props\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n\n  // user play\n  const [playState, setPlayState] = useState(false)\n\n  // auto play\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\n  const prefAutoplay = useSelector(selectAutoPlay)\n  const autoPlay = useAutoplay(gifRef)\n  // Preloading\n  const preload = useSelector(selectPreloadGifs)\n\n  const usedSource = playState ? viewSrc : thumbnailSrc\n\n  const play = React.useCallback(async () => {\n    setPlayState(true)\n  }, [])\n\n  const pause = React.useCallback(() => {\n    setPlayState(false)\n  }, [])\n\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (playState) {\n        setPlayState(false)\n      } else {\n        setPlayState(true)\n        setOverlayVisible(false)\n      }\n    },\n    [playState]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay || isFullscreen) {\n      if (autoPlay) {\n        setPlayState(true)\n        setOverlayVisible(false)\n      }\n    }\n\n    if (!autoPlay) {\n      setPlayState(false)\n    }\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\n\n  useEffect(() => {\n    if (preload) {\n      const loader = new Image()\n      loader.src = viewSrc\n    }\n  })\n\n  return (\n    <>\n      <PostImage\n        data-testid='gif'\n        ref={setGifRef}\n        src={usedSource}\n        alt={usedSource}\n        loading='lazy'\n        onLoad={onLoad}\n        width={width}\n        height={height}\n      />\n\n      <Overlay\n        isVisible={!playState || overlayVisible || detailsVisible}\n        setVisible={setOverlayVisible}\n        type='gif'\n        fullSrc={fullSrc}\n        index={index}\n        isPaused={!playState}\n        onTogglePaused={togglePlay}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NO_OP } from '../../../data/types'\nimport { selectAutoPlay, selectPreloadVideos } from '../../../redux/selectors'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostVideo } from './StyledMedia'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Video(props: MediaProps) {\n  const {\n    viewSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    isActive,\n    onFinished\n  } = props\n\n  const [playState, setPlayState] = useState(false)\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\n\n  const autoPlay = useAutoplay(videoRef)\n\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\n  const prefAutoplay = useSelector(selectAutoPlay)\n\n  const play = React.useCallback(async () => {\n    if (videoRef?.paused) {\n      try {\n        await videoRef.play()\n        setPlayState(true)\n      } catch (err) {\n        if ((err as DOMException).message.includes(\"user didn't interact with the document first\")) {\n          // Modern browsers prevent playing of videos before the use has interacted with the page in some form\n          console.warn('Autoplay failed because the user did not interact with the page first:', err)\n        } else if ((err as DOMException).message.includes('play() request was interrupted by a call to pause()')) {\n          // This happens when you scrollfast with autoplay enabled.\n          // The videos attempt to play but before they actually start you already scroll on\n          // and they get paused as they move offscreen.\n          console.warn('Play was interrupted by pause', err)\n        } else {\n          console.error('Failed to start video:', err)\n        }\n      }\n    }\n  }, [videoRef])\n\n  const pause = React.useCallback(() => {\n    if (!videoRef?.paused) {\n      try {\n        videoRef?.pause()\n        setPlayState(false)\n      } catch (err) {\n        console.error('Failed to start video:', err)\n      }\n    }\n  }, [videoRef])\n\n  const handleSeek = React.useCallback(\n    (value: number) => {\n      if (videoRef) {\n        videoRef.currentTime = value\n      }\n    },\n    [videoRef]\n  )\n\n  // user play\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (videoRef) {\n        if (videoRef.paused) {\n          play()\n          setOverlayVisible(false)\n        } else {\n          pause()\n        }\n      }\n    },\n    [pause, play, videoRef]\n  )\n\n  // automatic play/pause\n  React.useEffect(() => {\n    // in fullscreen mode autoplay is on by default\n    if (prefAutoplay || isFullscreen) {\n      if (autoPlay) {\n        play()\n        setOverlayVisible(false)\n      }\n    }\n\n    if (!autoPlay) {\n      pause()\n    }\n  }, [autoPlay, isFullscreen, pause, play, prefAutoplay])\n\n  return (\n    <>\n      <PostVideo\n        data-testid='video'\n        controls={false}\n        loop={!isFullscreen}\n        preload={preload}\n        ref={setVideoRef}\n        onLoadedMetadata={onLoad}\n        width={width}\n        height={height}\n        src={viewSrc}\n      />\n      <Overlay\n        type='video'\n        index={index}\n        fullSrc={fullSrc}\n        isPaused={!playState}\n        duration={videoRef?.duration || 0}\n        onTogglePaused={togglePlay}\n        onSeek={handleSeek}\n        videoRef={videoRef}\n        isVisible={playState === false || detailsVisible || overlayVisible}\n        setVisible={setOverlayVisible}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import * as r34 from 'r34-types'\nimport React from 'react'\nimport Picture from './media/Picture'\nimport Gif from './media/Gif'\nimport Video from './media/Video'\nimport { useSources } from '../../hooks/useSources'\n\ntype MediaProps = {\n  type: r34.PostType\n  index: number\n  thumbnailSrc: string\n  sampleSrc: string\n  fullSrc: string\n  onLoad: () => void\n  width: number\n  height: number\n  detailsVisible: boolean\n  isFullscreen?: boolean\n  onBack?: () => void\n  onFinished?: () => void\n  isActive?: boolean\n}\n\nexport function Media(props: MediaProps) {\n  const {\n    type,\n    thumbnailSrc,\n    sampleSrc,\n    fullSrc,\n    index,\n    onLoad,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen = false,\n    onBack,\n    onFinished,\n    isActive = false,\n  } = props\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\n\n  switch (type) {\n    case 'image':\n      return (\n        <Picture\n          viewSrc={src}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          onBack={onBack}\n          isActive={isActive}\n        />\n      )\n    case 'gif':\n      return (\n        <Gif\n          detailsVisible={detailsVisible}\n          viewSrc={src}\n          thumbnailSrc={preview}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          onBack={onBack}\n          isActive={isActive}\n        />\n      )\n    case 'video':\n      return (\n        <Video\n          detailsVisible={detailsVisible}\n          viewSrc={src}\n          thumbnailSrc={preview}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          onBack={onBack}\n          isActive={isActive}\n        />\n      )\n  }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectOriginals } from '../redux/selectors'\nimport * as r34 from 'r34-types'\n\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\n  const loadOriginals = useSelector(selectOriginals)\n\n  return React.useMemo(() => {\n    switch (type) {\n      case 'image':\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\n      case 'gif':\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\n      case 'video':\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, fullSrc]\n    }\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\n}\n","import React from 'react'\nimport { useLocation } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { RouteName } from '../../data/types'\n\nimport { ArrowUp } from '../../icons/FontAwesomeIcons'\nimport { BlockButton } from '../designsystem/Buttons'\n\nexport default function ScrollToTopButton() {\n  const location = useLocation()\n\n  if (location.pathname === RouteName.STORIES) {\n    return <NavigateBackButton />\n  } else {\n    return <ScrollUpButton />\n  }\n}\n\nfunction ScrollUpButton() {\n  const scrollUp = React.useCallback(() => window.scrollTo(0, 0), [])\n\n  return (\n    <BlockButton onClick={scrollUp}>\n      <ArrowUp /> Take me to the top\n    </BlockButton>\n  )\n}\n\nfunction NavigateBackButton() {\n  return (\n    <Link to={RouteName.SEARCH}>\n      <BlockButton>\n        <ArrowUp /> Take me to the top\n      </BlockButton>\n    </Link>\n  )\n}\n","import * as r34 from 'r34-types'\nimport React, { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled, { css } from 'styled-components'\nimport { NO_OP } from '../../data/types'\nimport useToggleTag from '../../hooks/useToggleTag'\nimport outOfResultsPicture from '../../icons/OutOfResults.png'\nimport { selectAliasesAsList } from '../../redux/selectors'\nimport FlexImage from '../designsystem/FlexImage'\nimport { HorizontalLine } from '../designsystem/Lines'\nimport { Surface } from '../designsystem/Surface'\nimport { SmallTitle } from '../designsystem/Text'\nimport TagList from '../tag/TagList'\nimport ScrollToTopButton from '../widgets/ScrollToTopButton'\nimport LayoutElementProps from './LayoutElementProps'\n\nconst Div = styled.div(\n  ({ theme }) => css`\n    padding: ${theme.dimensions.bigSpacing};\n  `\n)\n\nconst StyledSurface = styled(Surface)(\n  ({ theme }) => css`\n    max-width: ${theme.dimensions.bodyWidth};\n    margin: auto;\n    text-align: center;\n  `\n)\n\nconst StyledImage = styled(FlexImage)`\n  max-height: 50vh;\n`\n\nexport default function LayoutOutOfItems({ onLoad = NO_OP, virtualRef, style }: LayoutElementProps) {\n  return (\n    <Div style={style} ref={virtualRef} onLoad={onLoad} role='row'>\n      <OutOfItems />\n    </Div>\n  )\n}\n\nexport function OutOfItems() {\n  const aliases = useSelector(selectAliasesAsList)\n  const aliasesForRendering = useMemo(\n    () =>\n      aliases.reduce((result, alias) => {\n        result[alias.name] = { ...alias, types: [] }\n        return result\n      }, {} as Record<string, r34.Tag>),\n    [aliases]\n  )\n  const toggleTag = useToggleTag()\n\n  return (\n    <StyledSurface>\n      <StyledImage src={outOfResultsPicture} alt='Shironeko does not understand' />\n      <HorizontalLine />\n      <SmallTitle>You have reached the end!</SmallTitle>\n      <p>Go look for something else!</p>\n      {aliases.length > 0 && (\n        <>\n          <p>How about some of these?</p>\n          <TagList tags={aliasesForRendering} onTagClick={toggleTag} onTagMenu={NO_OP} detailed />\n        </>\n      )}\n      <ScrollToTopButton />\n    </StyledSurface>\n  )\n}\n"],"sourceRoot":""}